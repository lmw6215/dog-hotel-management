{
  "description": "Generated by Gemini.",
  "prompt": "웹 기반 앱 형태의 프로그램 제작을 도와줘.\n강아지 호텔을 운영하고 있는데, 이용 시간에 따른 계산 프로그램을 구현하고 싶어.\n구글 스프레드 시트를 이용하여 데이터를 운영하고 싶어.\n여러대의 휴대폰에서도 동일한 데이터를 운영할 수 있도록 구현할거야.\n기존 파이썬을 이용하여 사용하고 있던 코드는 아래에 첨부해줄테니, 계산법은 참고해줘.\n\ngoogle api나 구글 시트의 ID 가 필요하다면 나에게 요청해줘. 그럼 확인해줄게.\n\nimport tkinter as tk\nfrom tkinter import messagebox\nfrom tkinter import ttk\nfrom tkcalendar import DateEntry\nfrom datetime import datetime, timedelta\nimport json\nimport os\nimport uuid\nimport math\n\nDATA_FILE = \"dog_data.json\"\nRECORD_FILE = \"dog_record.json\"\n\nclass DogCareApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"강아지 호텔 관리 시스템\")\n\n        self.dog_list = []\n        self.load_data()\n\n        self.setup_ui()\n\n    def setup_ui(self):\n        frame = tk.Frame(self.root)\n        frame.pack(pady=20, padx=20)\n\n        entry_frame = tk.Frame(frame)\n        entry_frame.pack(pady=10, padx=10, fill=tk.X)\n\n        self.label = tk.Label(entry_frame, text=\"강아지 이름:\")\n        self.label.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.entry = tk.Entry(entry_frame)\n        self.entry.pack(side=tk.LEFT, fill=tk.X, expand=True)\n        self.entry.bind(\"<Return>\", self.enter_dog)  # Enter 키 바인딩\n\n        self.enter_button = tk.Button(entry_frame, text=\"입실\", command=self.enter_dog)\n        self.enter_button.pack(side=tk.LEFT, padx=(10, 0))\n\n        # Treeview for dog list\n        columns = (\"id\", \"name\", \"entry_time\", \"brushing\", \"walking\")\n        self.dog_tree = ttk.Treeview(frame, columns=columns, show=\"headings\")\n        self.dog_tree.heading(\"id\", text=\"ID\")\n        self.dog_tree.heading(\"name\", text=\"강아지 이름\")\n        self.dog_tree.heading(\"entry_time\", text=\"입실 시간\")\n        self.dog_tree.heading(\"brushing\", text=\"양치 횟수\")\n        self.dog_tree.heading(\"walking\", text=\"산책 횟수\")\n        self.dog_tree.column(\"id\", width=0, stretch=tk.NO)  # Hide the ID column\n        self.dog_tree.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)\n\n        button_frame = tk.Frame(frame)\n        button_frame.pack(pady=10, padx=10)\n\n        self.exit_button = tk.Button(button_frame, text=\"퇴실\", command=self.exit_dog)\n        self.exit_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.edit_button = tk.Button(button_frame, text=\"수정\", command=self.edit_entry_time)\n        self.edit_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.brushing_button = tk.Button(button_frame, text=\"양치 추가\", command=self.add_brushing)\n        self.brushing_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.walking_button = tk.Button(button_frame, text=\"산책 추가\", command=self.add_walking)\n        self.walking_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.record_button = tk.Button(button_frame, text=\"기록\", command=self.show_records)\n        self.record_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.remove_brushing_button = tk.Button(button_frame, text=\"양치 삭제\", command=self.remove_brushing)\n        self.remove_brushing_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.remove_walking_button = tk.Button(button_frame, text=\"산책 삭제\", command=self.remove_walking)\n        self.remove_walking_button.pack(side=tk.LEFT, padx=(0, 10))\n\n        self.refresh_treeview()\n\n    def load_data(self):\n        if os.path.exists(DATA_FILE):\n            with open(DATA_FILE, \"r\") as f:\n                self.dog_list = json.load(f)\n\n    def save_data(self):\n        with open(DATA_FILE, \"w\") as f:\n            json.dump(self.dog_list, f)\n\n    def save_record(self, record):\n        if os.path.exists(RECORD_FILE):\n            with open(RECORD_FILE, \"r\") as f:\n                records = json.load(f)\n        else:\n            records = []\n        records.append(record)\n        with open(RECORD_FILE, \"w\") as f:\n            json.dump(records, f)\n\n    def refresh_treeview(self):\n        for item in self.dog_tree.get_children():\n            self.dog_tree.delete(item)\n        for dog in self.dog_list:\n            entry_time = datetime.strptime(dog[\"entry_time\"], '%Y-%m-%d %H:%M:%S')\n            self.dog_tree.insert(\"\", tk.END, values=(\n                dog[\"id\"],\n                dog[\"name\"], \n                entry_time.strftime('%Y-%m-%d %H:%M:%S'), \n                dog.get(\"brushing\", 0), \n                dog.get(\"walking\", 0)\n            ))\n\n    def enter_dog(self, event=None):\n        dog_name = self.entry.get()\n        if dog_name:\n            entry_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            dog_id = str(uuid.uuid4())\n            self.dog_list.append({\"id\": dog_id, \"name\": dog_name, \"entry_time\": entry_time, \"brushing\": 0, \"walking\": 0})\n            self.refresh_treeview()\n            self.entry.delete(0, tk.END)\n            self.save_data()\n        else:\n            messagebox.showwarning(\"경고\", \"강아지 이름을 입력하세요.\")\n\n    def calculate_fee(self, entry_time, exit_time, brushing_count, walking_count):\n        total_days = (exit_time.date() - entry_time.date()).days\n        overnight_fee = total_days * 35000\n\n        remaining_time = exit_time - (entry_time + timedelta(days=total_days))\n        total_minutes = remaining_time.total_seconds() / 60\n\n        if total_minutes > 20:  # 20분의 유예 시간 적용\n            total_minutes -= 20\n            total_hours = math.ceil(total_minutes / 60)\n            daycare_fee = min(30000, total_hours * 4000)\n        else:\n            daycare_fee = 0\n\n        brushing_fee = brushing_count * 2000\n        walking_fee = walking_count * 10000\n\n        total_fee = overnight_fee + daycare_fee + brushing_fee + walking_fee\n        return total_fee\n\n    def calculate_overnight_fee(self, entry_time, exit_time, brushing_count, walking_count):\n        total_days = (exit_time.date() - entry_time.date()).days\n        overnight_fee = total_days * 35000\n\n        brushing_fee = brushing_count * 2000\n        walking_fee = walking_count * 10000\n\n        overnight_fee_including_walking_brushing = overnight_fee + brushing_fee + walking_fee\n        return overnight_fee_including_walking_brushing\n\n    def calculate_daycare_fee(self, entry_time, exit_time, brushing_count, walking_count):\n        total_days = (exit_time.date() - entry_time.date()).days\n        remaining_time = exit_time - (entry_time + timedelta(days=total_days))\n        total_minutes = remaining_time.total_seconds() / 60\n\n        if total_minutes > 20:  # 20분의 유예 시간 적용\n            total_minutes -= 20\n            total_hours = math.ceil(total_minutes / 60)\n            daycare_fee = min(30000, total_hours * 4000)\n        else:\n            daycare_fee = 0\n\n        return daycare_fee\n\n    def format_total_time(self, duration):\n        days = duration.days\n        hours, remainder = divmod(duration.seconds, 3600)\n        minutes, _ = divmod(remainder, 60)\n        return f\"{days}일 {hours}시간 {minutes}분\"\n\n    def find_dog_info(self, dog_id):\n        for dog in self.dog_list:\n            if dog[\"id\"] == dog_id:\n                return dog\n        return None\n\n    def exit_dog(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                exit_time = datetime.now()\n                entry_time = datetime.strptime(dog_info[\"entry_time\"], '%Y-%m-%d %H:%M:%S')\n                brushing_count = dog_info.get(\"brushing\", 0)\n                walking_count = dog_info.get(\"walking\", 0)\n                total_fee = self.calculate_fee(entry_time, exit_time, brushing_count, walking_count)\n                total_time = exit_time - entry_time\n                total_time_str = self.format_total_time(total_time)\n                overnight_fee = self.calculate_overnight_fee(entry_time, exit_time, brushing_count, walking_count)\n                daycare_fee = self.calculate_daycare_fee(entry_time, exit_time, brushing_count, walking_count)\n\n                confirmation = messagebox.askyesno(\"퇴실 확인\", \n                                                   f\"강아지 이름: {dog_info['name']}\\n\"\n                                                   f\"총 이용시간: {total_time_str}\\n\"\n                                                   f\"양치 횟수: {brushing_count}회\\n\"\n                                                   f\"산책 횟수: {walking_count}회\\n\\n\"\n                                                   f\"기본 요금: {overnight_fee:,.0f}원\\n\\n\"\n                                                   f\"추가 요금: {daycare_fee:,.0f}원\\n\\n\"\n                                                   f\"총 이용 요금: {total_fee:,.0f}원\\n\\n\"\n                                                   \"정말 퇴실하시겠습니까?\")\n                if confirmation:\n                    self.dog_list.remove(dog_info)\n                    self.refresh_treeview()\n                    record = {\n                        \"id\": dog_info['id'],\n                        \"name\": dog_info['name'],\n                        \"entry_time\": dog_info['entry_time'],\n                        \"exit_time\": exit_time.strftime('%Y-%m-%d %H:%M:%S'),\n                        \"total_time\": total_time_str,\n                        \"brushing\": brushing_count,\n                        \"walking\": walking_count,\n                        \"fee\": total_fee\n                    }\n                    self.save_record(record)\n                    self.save_data()\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"퇴실할 강아지를 선택하세요.\")\n\n    def edit_entry_time(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                current_entry_time = datetime.strptime(dog_info[\"entry_time\"], '%Y-%m-%d %H:%M:%S')\n\n                edit_window = tk.Toplevel(self.root)\n                edit_window.title(\"입실 시간 수정\")\n\n                tk.Label(edit_window, text=\"새로운 입실 날짜를 선택하세요:\").pack(pady=10)\n\n                new_entry_date = DateEntry(edit_window, width=12, background='darkblue', \n                                           foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')\n                new_entry_date.set_date(current_entry_time)\n                new_entry_date.pack(pady=10)\n\n                tk.Label(edit_window, text=\"새로운 입실 시간을 선택하세요:\").pack(pady=10)\n\n                time_frame = tk.Frame(edit_window)\n                time_frame.pack(pady=10)\n\n                hours = list(range(24))\n                minutes_seconds = list(range(60))\n\n                hour_var = tk.StringVar(value=current_entry_time.strftime('%H'))\n                minute_var = tk.StringVar(value=current_entry_time.strftime('%M'))\n                second_var = tk.StringVar(value=current_entry_time.strftime('%S'))\n\n                hour_combobox = ttk.Combobox(time_frame, textvariable=hour_var, values=[f\"{i:02}\" for i in hours], width=3)\n                hour_combobox.pack(side=tk.LEFT)\n                minute_combobox = ttk.Combobox(time_frame, textvariable=minute_var, values=[f\"{i:02}\" for i in minutes_seconds], width=3)\n                minute_combobox.pack(side=tk.LEFT)\n                second_combobox = ttk.Combobox(time_frame, textvariable=second_var, values=[f\"{i:02}\" for i in minutes_seconds], width=3)\n                second_combobox.pack(side=tk.LEFT)\n\n                # 초기 값 설정\n                hour_combobox.set(current_entry_time.strftime('%H'))\n                minute_combobox.set(current_entry_time.strftime('%M'))\n                second_combobox.set(current_entry_time.strftime('%S'))\n\n                def save_new_time():\n                    new_date = new_entry_date.get_date()\n                    new_time = f\"{hour_combobox.get()}:{minute_combobox.get()}:{second_combobox.get()}\"\n                    new_entry_time = f\"{new_date.strftime('%Y-%m-%d')} {new_time}\"\n                    dog_info[\"entry_time\"] = new_entry_time\n                    self.refresh_treeview()\n                    self.save_data()\n                    edit_window.destroy()\n\n                save_button = tk.Button(edit_window, text=\"저장\", command=save_new_time)\n                save_button.pack(pady=10)\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"수정할 강아지를 선택하세요.\")\n\n    def add_brushing(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                dog_info[\"brushing\"] += 1\n                self.refresh_treeview()\n                self.save_data()\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"양치를 추가할 강아지를 선택하세요.\")\n\n    def add_walking(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                dog_info[\"walking\"] += 1\n                self.refresh_treeview()\n                self.save_data()\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"산책을 추가할 강아지를 선택하세요.\")\n\n    def remove_brushing(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                if dog_info[\"brushing\"] > 0:\n                    dog_info[\"brushing\"] -= 1\n                    self.refresh_treeview()\n                    self.save_data()\n                else:\n                    messagebox.showwarning(\"경고\", \"양치 횟수가 0회입니다.\")\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"양치를 삭제할 강아지를 선택하세요.\")\n\n    def remove_walking(self):\n        selected_item = self.dog_tree.selection()\n        if selected_item:\n            item = self.dog_tree.item(selected_item)\n            dog_info = self.find_dog_info(item[\"values\"][0])\n            if dog_info:\n                if dog_info[\"walking\"] > 0:\n                    dog_info[\"walking\"] -= 1\n                    self.refresh_treeview()\n                    self.save_data()\n                else:\n                    messagebox.showwarning(\"경고\", \"산책 횟수가 0회입니다.\")\n            else:\n                messagebox.showwarning(\"경고\", \"강아지 정보를 찾을 수 없습니다.\")\n        else:\n            messagebox.showwarning(\"경고\", \"산책을 삭제할 강아지를 선택하세요.\")\n\n    def show_records(self):\n        records_window = tk.Toplevel(self.root)\n        records_window.title(\"기록\")\n\n        if os.path.exists(RECORD_FILE):\n            with open(RECORD_FILE, \"r\") as f:\n                records = json.load(f)\n        else:\n            records = []\n\n        tree = ttk.Treeview(records_window, columns=(\"name\", \"entry_time\", \"exit_time\", \"total_time\", \"brushing\", \"walking\", \"fee\"), show=\"headings\")\n        tree.heading(\"name\", text=\"강아지 이름\")\n        tree.heading(\"entry_time\", text=\"입실 시간\")\n        tree.heading(\"exit_time\", text=\"퇴실 시간\")\n        tree.heading(\"total_time\", text=\"총 이용시간\")\n        tree.heading(\"brushing\", text=\"양치 횟수\")\n        tree.heading(\"walking\", text=\"산책 횟수\")\n        tree.heading(\"fee\", text=\"이용 요금\")\n\n        for record in records:\n            tree.insert(\"\", tk.END, values=(record[\"name\"], record[\"entry_time\"], record[\"exit_time\"], record[\"total_time\"], record[\"brushing\"], record[\"walking\"], f\"{record['fee']:,.0f}원\"))\n\n        tree.pack(expand=True, fill=tk.BOTH)\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = DogCareApp(root)\n    root.mainloop()",
  "requestFramePermissions": [],
  "name": "App"
}